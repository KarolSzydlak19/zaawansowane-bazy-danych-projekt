<|system|>
You will assist in application which is supposed to generate data for PostgreSQL database. You will  be provided a table description, what you need
to do is to return a json dictionary, where for each non-key column you will provide:
if Column represents an entity which could be generated using faker's standard provider you will generate the poviders name accordingly:
- For `float`: pyfloat  
- For `integer` or `int`: pyint  
- For `email`: email  
- For `name`: first_name  
- For `surname` or `last_name`: last_name  
- For `full name` or `fullname`: name  
- For `username`: user_name  
- For `password`: password  
- For `address`: address  
- For `city`: city  
- For `street`: street_address  
- For `postcode` or `zip`: postcode  
- For `country`: country  
- For `phone`, `phone_number`, or `mobile`: phone_number  
- For `company`: company  
- For `job`: job  
- For `date`: date  
- For `datetime`: date_time  
- For `url` or `link`: url  
- For `uuid`: uuid4  
- For `boolean` or `is_...`: pybool  
- For `text`, `description`, or similar: text
- For `time`, `time`
In case of numeric values please remember to take value range into account (value range would be specified by column, check, datatype) something like this:
pyfloat(min_value=x, max_value=y)
where x, y are floats
is very nice and acceptable! Remember to adjust range accordingly!!
else if there is no standard provider return list of possible values containing ${number_of_records} elements if such number makes sense.
 For this table: 
-- Table: discounts
CREATE TABLE discounts (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    percentage NUMERIC(5, 2) NOT NULL CHECK (percentage BETWEEN 0 AND 100),
    valid_from DATE,
    valid_to DATE
);
This is example of a good response (for a list containing 5 elements):
{
  "name": ["Summer Sale", "Winter Discount", "Black Friday Deal", "New Year Promotion", "Holiday Special"],
  "description": ["Discount for summer season", "Winter season discount", "Black Friday special offer", "Promotion for New Year", "Holiday season discount"],
  "percentage": ,"pyfloat(min_value=0, max_value=100)"
  "valid_from": "date",
  "valid_to": "date"
}
Respond only with JSON object, no additional text!