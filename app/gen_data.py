import json
from faker import Faker
import random

fake = Faker()

# How many rows to generate per table?
ROWS_PER_TABLE = 10

# Load parsed schema
with open("parsed_schema.json", "r") as f:
    schema = json.load(f)

# Helper: Map SQL types to fake values
def generate_fake_value(sql_type):
    if "VARCHAR" in sql_type or "TEXT" in sql_type:
        return "'{}'".format(fake.text(max_nb_chars=50).replace("'", "''"))
    elif "EMAIL" in sql_type:
        return f"'{fake.email()}'"
    elif "INT" in sql_type or "SERIAL" in sql_type:
        return str(random.randint(1, 100))
    elif "NUMERIC" in sql_type or "DECIMAL" in sql_type:
        return str(round(random.uniform(10, 100), 2))
    elif "TIMESTAMP" in sql_type:
        return f"'{fake.date_time_this_year().isoformat(sep=' ')}'"
    elif "DATE" in sql_type:
        return f"'{fake.date_this_year()}'"
    else:
        return "NULL"

# Generate SQL
insert_statements = []

for table_name, table_info in schema.items():
    cols = [col["name"] for col in table_info["columns"] if col["type"] != "SERIAL"]
    if not cols:
        continue

    for _ in range(ROWS_PER_TABLE):
        values = []
        for col in table_info["columns"]:
            if col["type"] == "SERIAL":
                continue  # let DB handle auto-increment
            val = generate_fake_value(col["type"])
            values.append(val)
        
        sql = f"INSERT INTO {table_name} ({', '.join(cols)}) VALUES ({', '.join(values)});"
        insert_statements.append(sql)

# Save to .sql file
with open("insert_data.sql", "w") as f:
    f.write("-- SQL Insert Data Generated by Faker\n\n")
    f.write("\n".join(insert_statements))

print("âœ… Insert statements written to insert_data.sql")
